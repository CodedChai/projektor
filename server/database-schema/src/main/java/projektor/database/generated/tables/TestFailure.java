/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.TestFailureRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestFailure extends TableImpl<TestFailureRecord> {

    private static final long serialVersionUID = -1486297292;

    /**
     * The reference instance of <code>public.test_failure</code>
     */
    public static final TestFailure TEST_FAILURE = new TestFailure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestFailureRecord> getRecordType() {
        return TestFailureRecord.class;
    }

    /**
     * The column <code>public.test_failure.id</code>.
     */
    public final TableField<TestFailureRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test_failure_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.test_failure.test_case_id</code>.
     */
    public final TableField<TestFailureRecord, Long> TEST_CASE_ID = createField("test_case_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test_failure_test_case_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.test_failure.failure_message</code>.
     */
    public final TableField<TestFailureRecord, String> FAILURE_MESSAGE = createField("failure_message", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_failure.failure_type</code>.
     */
    public final TableField<TestFailureRecord, String> FAILURE_TYPE = createField("failure_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_failure.failure_text</code>.
     */
    public final TableField<TestFailureRecord, String> FAILURE_TEXT = createField("failure_text", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.test_failure</code> table reference
     */
    public TestFailure() {
        this(DSL.name("test_failure"), null);
    }

    /**
     * Create an aliased <code>public.test_failure</code> table reference
     */
    public TestFailure(String alias) {
        this(DSL.name(alias), TEST_FAILURE);
    }

    /**
     * Create an aliased <code>public.test_failure</code> table reference
     */
    public TestFailure(Name alias) {
        this(alias, TEST_FAILURE);
    }

    private TestFailure(Name alias, Table<TestFailureRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestFailure(Name alias, Table<TestFailureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TestFailure(Table<O> child, ForeignKey<O, TestFailureRecord> key) {
        super(child, key, TEST_FAILURE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_FAILURE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TestFailureRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEST_FAILURE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestFailureRecord> getPrimaryKey() {
        return Keys.TEST_FAILURE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestFailureRecord>> getKeys() {
        return Arrays.<UniqueKey<TestFailureRecord>>asList(Keys.TEST_FAILURE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TestFailureRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TestFailureRecord, ?>>asList(Keys.TEST_FAILURE__TEST_FAILURE_TEST_CASE_ID_FKEY);
    }

    public TestCase testCase() {
        return new TestCase(this, Keys.TEST_FAILURE__TEST_FAILURE_TEST_CASE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestFailure as(String alias) {
        return new TestFailure(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestFailure as(Name alias) {
        return new TestFailure(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestFailure rename(String name) {
        return new TestFailure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestFailure rename(Name name) {
        return new TestFailure(name, null);
    }
}
