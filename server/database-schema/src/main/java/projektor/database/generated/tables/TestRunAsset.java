/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.TestRunAssetRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRunAsset extends TableImpl<TestRunAssetRecord> {

    private static final long serialVersionUID = 1087044069;

    /**
     * The reference instance of <code>public.test_run_asset</code>
     */
    public static final TestRunAsset TEST_RUN_ASSET = new TestRunAsset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRunAssetRecord> getRecordType() {
        return TestRunAssetRecord.class;
    }

    /**
     * The column <code>public.test_run_asset.id</code>.
     */
    public final TableField<TestRunAssetRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test_run_asset_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.test_run_asset.test_run_id</code>.
     */
    public final TableField<TestRunAssetRecord, Long> TEST_RUN_ID = createField("test_run_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.test_run_asset.file_name</code>.
     */
    public final TableField<TestRunAssetRecord, String> FILE_NAME = createField("file_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_run_asset.bucket_name</code>.
     */
    public final TableField<TestRunAssetRecord, String> BUCKET_NAME = createField("bucket_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_run_asset.file_size</code>.
     */
    public final TableField<TestRunAssetRecord, Long> FILE_SIZE = createField("file_size", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.test_run_asset</code> table reference
     */
    public TestRunAsset() {
        this(DSL.name("test_run_asset"), null);
    }

    /**
     * Create an aliased <code>public.test_run_asset</code> table reference
     */
    public TestRunAsset(String alias) {
        this(DSL.name(alias), TEST_RUN_ASSET);
    }

    /**
     * Create an aliased <code>public.test_run_asset</code> table reference
     */
    public TestRunAsset(Name alias) {
        this(alias, TEST_RUN_ASSET);
    }

    private TestRunAsset(Name alias, Table<TestRunAssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestRunAsset(Name alias, Table<TestRunAssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TestRunAsset(Table<O> child, ForeignKey<O, TestRunAssetRecord> key) {
        super(child, key, TEST_RUN_ASSET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_RUN_ASSET_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TestRunAssetRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEST_RUN_ASSET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestRunAssetRecord> getPrimaryKey() {
        return Keys.TEST_RUN_ASSET_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestRunAssetRecord>> getKeys() {
        return Arrays.<UniqueKey<TestRunAssetRecord>>asList(Keys.TEST_RUN_ASSET_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TestRunAssetRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TestRunAssetRecord, ?>>asList(Keys.TEST_RUN_ASSET__TEST_RUN_ASSET_TEST_RUN_ID_FKEY);
    }

    public TestRun testRun() {
        return new TestRun(this, Keys.TEST_RUN_ASSET__TEST_RUN_ASSET_TEST_RUN_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAsset as(String alias) {
        return new TestRunAsset(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAsset as(Name alias) {
        return new TestRunAsset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAsset rename(String name) {
        return new TestRunAsset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAsset rename(Name name) {
        return new TestRunAsset(name, null);
    }
}
