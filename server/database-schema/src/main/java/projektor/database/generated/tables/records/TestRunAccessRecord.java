/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.TestRunAccess;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRunAccessRecord extends UpdatableRecordImpl<TestRunAccessRecord> implements Record2<Long, String> {

    private static final long serialVersionUID = -693997547;

    /**
     * Setter for <code>public.test_run_access.test_run_id</code>.
     */
    public TestRunAccessRecord setTestRunId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run_access.test_run_id</code>.
     */
    public Long getTestRunId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.test_run_access.asset_key</code>.
     */
    public TestRunAccessRecord setAssetKey(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run_access.asset_key</code>.
     */
    public String getAssetKey() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return TestRunAccess.TEST_RUN_ACCESS.TEST_RUN_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return TestRunAccess.TEST_RUN_ACCESS.ASSET_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getTestRunId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getAssetKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getTestRunId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAssetKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAccessRecord value1(Long value) {
        setTestRunId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAccessRecord value2(String value) {
        setAssetKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAccessRecord values(Long value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRunAccessRecord
     */
    public TestRunAccessRecord() {
        super(TestRunAccess.TEST_RUN_ACCESS);
    }

    /**
     * Create a detached, initialised TestRunAccessRecord
     */
    public TestRunAccessRecord(Long testRunId, String assetKey) {
        super(TestRunAccess.TEST_RUN_ACCESS);

        set(0, testRunId);
        set(1, assetKey);
    }
}
