/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.TestRunAttachmentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRunAttachment extends TableImpl<TestRunAttachmentRecord> {

    private static final long serialVersionUID = -238894226;

    /**
     * The reference instance of <code>public.test_run_attachment</code>
     */
    public static final TestRunAttachment TEST_RUN_ATTACHMENT = new TestRunAttachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRunAttachmentRecord> getRecordType() {
        return TestRunAttachmentRecord.class;
    }

    /**
     * The column <code>public.test_run_attachment.id</code>.
     */
    public final TableField<TestRunAttachmentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test_run_attachment_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.test_run_attachment.test_run_id</code>.
     */
    public final TableField<TestRunAttachmentRecord, Long> TEST_RUN_ID = createField("test_run_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.test_run_attachment.file_name</code>.
     */
    public final TableField<TestRunAttachmentRecord, String> FILE_NAME = createField("file_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_run_attachment.object_name</code>.
     */
    public final TableField<TestRunAttachmentRecord, String> OBJECT_NAME = createField("object_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_run_attachment.file_size</code>.
     */
    public final TableField<TestRunAttachmentRecord, Long> FILE_SIZE = createField("file_size", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.test_run_attachment</code> table reference
     */
    public TestRunAttachment() {
        this(DSL.name("test_run_attachment"), null);
    }

    /**
     * Create an aliased <code>public.test_run_attachment</code> table reference
     */
    public TestRunAttachment(String alias) {
        this(DSL.name(alias), TEST_RUN_ATTACHMENT);
    }

    /**
     * Create an aliased <code>public.test_run_attachment</code> table reference
     */
    public TestRunAttachment(Name alias) {
        this(alias, TEST_RUN_ATTACHMENT);
    }

    private TestRunAttachment(Name alias, Table<TestRunAttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestRunAttachment(Name alias, Table<TestRunAttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TestRunAttachment(Table<O> child, ForeignKey<O, TestRunAttachmentRecord> key) {
        super(child, key, TEST_RUN_ATTACHMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_RUN_ATTACHMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TestRunAttachmentRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEST_RUN_ATTACHMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestRunAttachmentRecord> getPrimaryKey() {
        return Keys.TEST_RUN_ATTACHMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestRunAttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<TestRunAttachmentRecord>>asList(Keys.TEST_RUN_ATTACHMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TestRunAttachmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TestRunAttachmentRecord, ?>>asList(Keys.TEST_RUN_ATTACHMENT__TEST_RUN_ATTACHMENT_TEST_RUN_ID_FKEY);
    }

    public TestRun testRun() {
        return new TestRun(this, Keys.TEST_RUN_ATTACHMENT__TEST_RUN_ATTACHMENT_TEST_RUN_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAttachment as(String alias) {
        return new TestRunAttachment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAttachment as(Name alias) {
        return new TestRunAttachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAttachment rename(String name) {
        return new TestRunAttachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAttachment rename(Name name) {
        return new TestRunAttachment(name, null);
    }
}
