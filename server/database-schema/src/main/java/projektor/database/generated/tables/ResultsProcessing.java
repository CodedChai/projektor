/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.ResultsProcessingRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResultsProcessing extends TableImpl<ResultsProcessingRecord> {

    private static final long serialVersionUID = 1805169531;

    /**
     * The reference instance of <code>public.results_processing</code>
     */
    public static final ResultsProcessing RESULTS_PROCESSING = new ResultsProcessing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsProcessingRecord> getRecordType() {
        return ResultsProcessingRecord.class;
    }

    /**
     * The column <code>public.results_processing.public_id</code>.
     */
    public final TableField<ResultsProcessingRecord, String> PUBLIC_ID = createField("public_id", org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>public.results_processing.status</code>.
     */
    public final TableField<ResultsProcessingRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.results_processing.error_message</code>.
     */
    public final TableField<ResultsProcessingRecord, String> ERROR_MESSAGE = createField("error_message", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.results_processing.created_timestamp</code>.
     */
    public final TableField<ResultsProcessingRecord, Timestamp> CREATED_TIMESTAMP = createField("created_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.results_processing</code> table reference
     */
    public ResultsProcessing() {
        this(DSL.name("results_processing"), null);
    }

    /**
     * Create an aliased <code>public.results_processing</code> table reference
     */
    public ResultsProcessing(String alias) {
        this(DSL.name(alias), RESULTS_PROCESSING);
    }

    /**
     * Create an aliased <code>public.results_processing</code> table reference
     */
    public ResultsProcessing(Name alias) {
        this(alias, RESULTS_PROCESSING);
    }

    private ResultsProcessing(Name alias, Table<ResultsProcessingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResultsProcessing(Name alias, Table<ResultsProcessingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ResultsProcessing(Table<O> child, ForeignKey<O, ResultsProcessingRecord> key) {
        super(child, key, RESULTS_PROCESSING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_RESULTS_PROCESSING_STATUS, Indexes.RESULTS_PROCESSING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResultsProcessingRecord> getPrimaryKey() {
        return Keys.RESULTS_PROCESSING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResultsProcessingRecord>> getKeys() {
        return Arrays.<UniqueKey<ResultsProcessingRecord>>asList(Keys.RESULTS_PROCESSING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsProcessing as(String alias) {
        return new ResultsProcessing(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsProcessing as(Name alias) {
        return new ResultsProcessing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsProcessing rename(String name) {
        return new ResultsProcessing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsProcessing rename(Name name) {
        return new ResultsProcessing(name, null);
    }
}
