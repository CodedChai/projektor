/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.TestSuiteRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuite extends TableImpl<TestSuiteRecord> {

    private static final long serialVersionUID = -1352042569;

    /**
     * The reference instance of <code>public.test_suite</code>
     */
    public static final TestSuite TEST_SUITE = new TestSuite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestSuiteRecord> getRecordType() {
        return TestSuiteRecord.class;
    }

    /**
     * The column <code>public.test_suite.id</code>.
     */
    public final TableField<TestSuiteRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test_suite_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.test_suite.test_run_id</code>.
     */
    public final TableField<TestSuiteRecord, Long> TEST_RUN_ID = createField("test_run_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test_suite_test_run_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.test_suite.idx</code>.
     */
    public final TableField<TestSuiteRecord, Integer> IDX = createField("idx", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.package_name</code>.
     */
    public final TableField<TestSuiteRecord, String> PACKAGE_NAME = createField("package_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.class_name</code>.
     */
    public final TableField<TestSuiteRecord, String> CLASS_NAME = createField("class_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.test_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> TEST_COUNT = createField("test_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.passing_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> PASSING_COUNT = createField("passing_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.skipped_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> SKIPPED_COUNT = createField("skipped_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.failure_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> FAILURE_COUNT = createField("failure_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.start_ts</code>.
     */
    public final TableField<TestSuiteRecord, Timestamp> START_TS = createField("start_ts", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.test_suite.hostname</code>.
     */
    public final TableField<TestSuiteRecord, String> HOSTNAME = createField("hostname", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.duration</code>.
     */
    public final TableField<TestSuiteRecord, BigDecimal> DURATION = createField("duration", org.jooq.impl.SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.test_suite.system_out</code>.
     */
    public final TableField<TestSuiteRecord, String> SYSTEM_OUT = createField("system_out", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.system_err</code>.
     */
    public final TableField<TestSuiteRecord, String> SYSTEM_ERR = createField("system_err", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.has_system_out</code>.
     */
    public final TableField<TestSuiteRecord, Boolean> HAS_SYSTEM_OUT = createField("has_system_out", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.test_suite.has_system_err</code>.
     */
    public final TableField<TestSuiteRecord, Boolean> HAS_SYSTEM_ERR = createField("has_system_err", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.test_suite.test_suite_group_id</code>.
     */
    public final TableField<TestSuiteRecord, Long> TEST_SUITE_GROUP_ID = createField("test_suite_group_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.test_suite</code> table reference
     */
    public TestSuite() {
        this(DSL.name("test_suite"), null);
    }

    /**
     * Create an aliased <code>public.test_suite</code> table reference
     */
    public TestSuite(String alias) {
        this(DSL.name(alias), TEST_SUITE);
    }

    /**
     * Create an aliased <code>public.test_suite</code> table reference
     */
    public TestSuite(Name alias) {
        this(alias, TEST_SUITE);
    }

    private TestSuite(Name alias, Table<TestSuiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestSuite(Name alias, Table<TestSuiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TestSuite(Table<O> child, ForeignKey<O, TestSuiteRecord> key) {
        super(child, key, TEST_SUITE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_TEST_SUITE_IDX, Indexes.TEST_SUITE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TestSuiteRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEST_SUITE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestSuiteRecord> getPrimaryKey() {
        return Keys.TEST_SUITE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestSuiteRecord>> getKeys() {
        return Arrays.<UniqueKey<TestSuiteRecord>>asList(Keys.TEST_SUITE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TestSuiteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TestSuiteRecord, ?>>asList(Keys.TEST_SUITE__TEST_SUITE_TEST_RUN_ID_FKEY, Keys.TEST_SUITE__TEST_SUITE_TEST_SUITE_GROUP_ID_FKEY);
    }

    public TestRun testRun() {
        return new TestRun(this, Keys.TEST_SUITE__TEST_SUITE_TEST_RUN_ID_FKEY);
    }

    public TestSuiteGroup testSuiteGroup() {
        return new TestSuiteGroup(this, Keys.TEST_SUITE__TEST_SUITE_TEST_SUITE_GROUP_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestSuite as(String alias) {
        return new TestSuite(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestSuite as(Name alias) {
        return new TestSuite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuite rename(String name) {
        return new TestSuite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuite rename(Name name) {
        return new TestSuite(name, null);
    }
}
