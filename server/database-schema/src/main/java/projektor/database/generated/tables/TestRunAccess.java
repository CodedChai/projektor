/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.TestRunAccessRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRunAccess extends TableImpl<TestRunAccessRecord> {

    private static final long serialVersionUID = 386520795;

    /**
     * The reference instance of <code>public.test_run_access</code>
     */
    public static final TestRunAccess TEST_RUN_ACCESS = new TestRunAccess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRunAccessRecord> getRecordType() {
        return TestRunAccessRecord.class;
    }

    /**
     * The column <code>public.test_run_access.test_run_id</code>.
     */
    public final TableField<TestRunAccessRecord, Long> TEST_RUN_ID = createField("test_run_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.test_run_access.asset_key</code>.
     */
    public final TableField<TestRunAccessRecord, String> ASSET_KEY = createField("asset_key", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.test_run_access</code> table reference
     */
    public TestRunAccess() {
        this(DSL.name("test_run_access"), null);
    }

    /**
     * Create an aliased <code>public.test_run_access</code> table reference
     */
    public TestRunAccess(String alias) {
        this(DSL.name(alias), TEST_RUN_ACCESS);
    }

    /**
     * Create an aliased <code>public.test_run_access</code> table reference
     */
    public TestRunAccess(Name alias) {
        this(alias, TEST_RUN_ACCESS);
    }

    private TestRunAccess(Name alias, Table<TestRunAccessRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestRunAccess(Name alias, Table<TestRunAccessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TestRunAccess(Table<O> child, ForeignKey<O, TestRunAccessRecord> key) {
        super(child, key, TEST_RUN_ACCESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST_RUN_ACCESS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestRunAccessRecord> getPrimaryKey() {
        return Keys.TEST_RUN_ACCESS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestRunAccessRecord>> getKeys() {
        return Arrays.<UniqueKey<TestRunAccessRecord>>asList(Keys.TEST_RUN_ACCESS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TestRunAccessRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TestRunAccessRecord, ?>>asList(Keys.TEST_RUN_ACCESS__TEST_RUN_ACCESS_TEST_RUN_ID_FKEY);
    }

    public TestRun testRun() {
        return new TestRun(this, Keys.TEST_RUN_ACCESS__TEST_RUN_ACCESS_TEST_RUN_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAccess as(String alias) {
        return new TestRunAccess(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRunAccess as(Name alias) {
        return new TestRunAccess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAccess rename(String name) {
        return new TestRunAccess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAccess rename(Name name) {
        return new TestRunAccess(name, null);
    }
}
