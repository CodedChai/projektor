/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.GitMetadata;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GitMetadataRecord extends UpdatableRecordImpl<GitMetadataRecord> implements Record5<Long, Long, String, Boolean, String> {

    private static final long serialVersionUID = -403527093;

    /**
     * Setter for <code>public.git_metadata.id</code>.
     */
    public GitMetadataRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.git_metadata.test_run_id</code>.
     */
    public GitMetadataRecord setTestRunId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.test_run_id</code>.
     */
    public Long getTestRunId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.git_metadata.repo_name</code>.
     */
    public GitMetadataRecord setRepoName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.repo_name</code>.
     */
    public String getRepoName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.git_metadata.is_main_branch</code>.
     */
    public GitMetadataRecord setIsMainBranch(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.is_main_branch</code>.
     */
    public Boolean getIsMainBranch() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.git_metadata.branch_name</code>.
     */
    public GitMetadataRecord setBranchName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.branch_name</code>.
     */
    public String getBranchName() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Long, String, Boolean, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return GitMetadata.GIT_METADATA.ID;
    }

    @Override
    public Field<Long> field2() {
        return GitMetadata.GIT_METADATA.TEST_RUN_ID;
    }

    @Override
    public Field<String> field3() {
        return GitMetadata.GIT_METADATA.REPO_NAME;
    }

    @Override
    public Field<Boolean> field4() {
        return GitMetadata.GIT_METADATA.IS_MAIN_BRANCH;
    }

    @Override
    public Field<String> field5() {
        return GitMetadata.GIT_METADATA.BRANCH_NAME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getTestRunId();
    }

    @Override
    public String component3() {
        return getRepoName();
    }

    @Override
    public Boolean component4() {
        return getIsMainBranch();
    }

    @Override
    public String component5() {
        return getBranchName();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getTestRunId();
    }

    @Override
    public String value3() {
        return getRepoName();
    }

    @Override
    public Boolean value4() {
        return getIsMainBranch();
    }

    @Override
    public String value5() {
        return getBranchName();
    }

    @Override
    public GitMetadataRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public GitMetadataRecord value2(Long value) {
        setTestRunId(value);
        return this;
    }

    @Override
    public GitMetadataRecord value3(String value) {
        setRepoName(value);
        return this;
    }

    @Override
    public GitMetadataRecord value4(Boolean value) {
        setIsMainBranch(value);
        return this;
    }

    @Override
    public GitMetadataRecord value5(String value) {
        setBranchName(value);
        return this;
    }

    @Override
    public GitMetadataRecord values(Long value1, Long value2, String value3, Boolean value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GitMetadataRecord
     */
    public GitMetadataRecord() {
        super(GitMetadata.GIT_METADATA);
    }

    /**
     * Create a detached, initialised GitMetadataRecord
     */
    public GitMetadataRecord(Long id, Long testRunId, String repoName, Boolean isMainBranch, String branchName) {
        super(GitMetadata.GIT_METADATA);

        set(0, id);
        set(1, testRunId);
        set(2, repoName);
        set(3, isMainBranch);
        set(4, branchName);
    }
}
